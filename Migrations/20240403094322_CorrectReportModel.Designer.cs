// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tenor.Data;

#nullable disable

namespace Tenor.Migrations
{
    [DbContext(typeof(TenorDbContext))]
    [Migration("20240403094322_CorrectReportModel")]
    partial class CorrectReportModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tenor.Models.AccessLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccessLogs");
                });

            modelBuilder.Entity("Tenor.Models.Counter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Aggregation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RefColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubsetId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubsetId");

                    b.ToTable("Counters");
                });

            modelBuilder.Entity("Tenor.Models.CounterField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("CounterFields");
                });

            modelBuilder.Entity("Tenor.Models.CounterFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CounterFieldId")
                        .HasColumnType("int");

                    b.Property<int>("CounterId")
                        .HasColumnType("int");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CounterFieldId");

                    b.HasIndex("CounterId");

                    b.ToTable("CounterFieldValues");
                });

            modelBuilder.Entity("Tenor.Models.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("Tenor.Models.DashboardField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("DashboardFields");
                });

            modelBuilder.Entity("Tenor.Models.DashboardFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DashboardFieldId")
                        .HasColumnType("int");

                    b.Property<int>("DashboardId")
                        .HasColumnType("int");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DashboardFieldId");

                    b.HasIndex("DashboardId");

                    b.ToTable("DashboardFieldValues");
                });

            modelBuilder.Entity("Tenor.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Tenor.Models.Dimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DeviceId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Dimensions");
                });

            modelBuilder.Entity("Tenor.Models.DimensionJoiner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DimensionId")
                        .HasColumnType("int");

                    b.Property<string>("FkName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PkName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DimensionId");

                    b.ToTable("DimensionJoiners");
                });

            modelBuilder.Entity("Tenor.Models.DimensionLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DimensionId")
                        .HasColumnType("int");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("OrderBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DimensionId");

                    b.HasIndex("LevelId");

                    b.HasIndex("ParentId");

                    b.ToTable("DimensionLevels");
                });

            modelBuilder.Entity("Tenor.Models.ExtraField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ExtraFields");
                });

            modelBuilder.Entity("Tenor.Models.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArgumentsCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsBool")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Functions");
                });

            modelBuilder.Entity("Tenor.Models.GroupTenantRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId");

                    b.ToTable("GroupTenantRoles");
                });

            modelBuilder.Entity("Tenor.Models.Kpi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("OperationId");

                    b.ToTable("Kpis");
                });

            modelBuilder.Entity("Tenor.Models.KpiField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("KpiFields");
                });

            modelBuilder.Entity("Tenor.Models.KpiFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KpiFieldId")
                        .HasColumnType("int");

                    b.Property<int>("KpiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KpiFieldId");

                    b.HasIndex("KpiId");

                    b.ToTable("KpiFieldValues");
                });

            modelBuilder.Entity("Tenor.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFilter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLevel")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Tenor.Models.MeasureHaving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LogicOpt")
                        .HasColumnType("int");

                    b.Property<int>("MeasureId")
                        .HasColumnType("int");

                    b.Property<int?>("OperatorId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ReportMeasureId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ReportMeasureId");

                    b.ToTable("MeasureHavings");
                });

            modelBuilder.Entity("Tenor.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Aggregation")
                        .HasColumnType("int");

                    b.Property<int?>("CounterId")
                        .HasColumnType("int");

                    b.Property<int?>("FunctionId")
                        .HasColumnType("int");

                    b.Property<int?>("KpiId")
                        .HasColumnType("int");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CounterId");

                    b.HasIndex("FunctionId");

                    b.HasIndex("KpiId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ParentId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("Tenor.Models.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("Tenor.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Tenor.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ChildId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Tenor.Models.ReportField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("ReportFields");
                });

            modelBuilder.Entity("Tenor.Models.ReportFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportFieldId")
                        .HasColumnType("int");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReportFieldId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportFieldValues");
                });

            modelBuilder.Entity("Tenor.Models.ReportFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DimensionLevelId")
                        .HasColumnType("int");

                    b.Property<int>("LogicalOperator")
                        .HasColumnType("int");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DimensionLevelId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportFilters");
                });

            modelBuilder.Entity("Tenor.Models.ReportLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DimensionLevelId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<int>("SortDirection")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DimensionLevelId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportLevels");
                });

            modelBuilder.Entity("Tenor.Models.ReportMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportMeasures");
                });

            modelBuilder.Entity("Tenor.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Tenor.Models.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Tenor.Models.Subset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DataTS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DbLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("DimensionTable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FactDimensionReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GranularityPeriod")
                        .HasColumnType("int");

                    b.Property<string>("IndexTS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLoad")
                        .HasColumnType("bit");

                    b.Property<string>("JoinExpression")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LoadPriorety")
                        .HasColumnType("int");

                    b.Property<int?>("MaxDataDate")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RefDbLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefSchema")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefTableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartChar")
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("SummaryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Subsets");
                });

            modelBuilder.Entity("Tenor.Models.SubsetField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("SubsetFields");
                });

            modelBuilder.Entity("Tenor.Models.SubsetFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubsetFieldId")
                        .HasColumnType("int");

                    b.Property<int>("SubsetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubsetFieldId");

                    b.HasIndex("SubsetId");

                    b.ToTable("SubsetFieldValues");
                });

            modelBuilder.Entity("Tenor.Models.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Tenor.Models.TenantDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantDevice");
                });

            modelBuilder.Entity("Tenor.Models.UserTenantRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId");

                    b.ToTable("UserTenantRoles");
                });

            modelBuilder.Entity("Tenor.Models.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpired")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenExpired")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Tenor.Models.Counter", b =>
                {
                    b.HasOne("Tenor.Models.Subset", "Subset")
                        .WithMany("Counters")
                        .HasForeignKey("SubsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subset");
                });

            modelBuilder.Entity("Tenor.Models.CounterField", b =>
                {
                    b.HasOne("Tenor.Models.ExtraField", "ExtraField")
                        .WithMany("CounterFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraField");
                });

            modelBuilder.Entity("Tenor.Models.CounterFieldValue", b =>
                {
                    b.HasOne("Tenor.Models.CounterField", "CounterField")
                        .WithMany("CounterFieldValues")
                        .HasForeignKey("CounterFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenor.Models.Counter", "Counter")
                        .WithMany("CounterFieldValues")
                        .HasForeignKey("CounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counter");

                    b.Navigation("CounterField");
                });

            modelBuilder.Entity("Tenor.Models.DashboardField", b =>
                {
                    b.HasOne("Tenor.Models.ExtraField", "ExtraField")
                        .WithMany("DashboardFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraField");
                });

            modelBuilder.Entity("Tenor.Models.DashboardFieldValue", b =>
                {
                    b.HasOne("Tenor.Models.DashboardField", "DashboardField")
                        .WithMany("DashboardFieldValues")
                        .HasForeignKey("DashboardFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenor.Models.Dashboard", "Dashboard")
                        .WithMany("DashboardFieldValues")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dashboard");

                    b.Navigation("DashboardField");
                });

            modelBuilder.Entity("Tenor.Models.Device", b =>
                {
                    b.HasOne("Tenor.Models.Device", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Tenor.Models.Dimension", b =>
                {
                    b.HasOne("Tenor.Models.Device", "Device")
                        .WithMany("Dimensions")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Tenor.Models.DimensionJoiner", b =>
                {
                    b.HasOne("Tenor.Models.Dimension", "Dimension")
                        .WithMany("DimensionJoiners")
                        .HasForeignKey("DimensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dimension");
                });

            modelBuilder.Entity("Tenor.Models.DimensionLevel", b =>
                {
                    b.HasOne("Tenor.Models.Dimension", "Dimension")
                        .WithMany("DimensionLevels")
                        .HasForeignKey("DimensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenor.Models.Level", "Level")
                        .WithMany("DimensionLevels")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenor.Models.DimensionLevel", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Dimension");

                    b.Navigation("Level");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Tenor.Models.ExtraField", b =>
                {
                    b.HasOne("Tenor.Models.Device", "Device")
                        .WithMany("ExtraFields")
                        .HasForeignKey("DeviceId");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Tenor.Models.GroupTenantRole", b =>
                {
                    b.HasOne("Tenor.Models.Role", "Role")
                        .WithMany("GroupTenantRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenor.Models.Tenant", "Tenant")
                        .WithMany("GroupTenantRoles")
                        .HasForeignKey("TenantId");

                    b.Navigation("Role");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Tenor.Models.Kpi", b =>
                {
                    b.HasOne("Tenor.Models.Device", "Device")
                        .WithMany("Kpis")
                        .HasForeignKey("DeviceId");

                    b.HasOne("Tenor.Models.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Tenor.Models.KpiField", b =>
                {
                    b.HasOne("Tenor.Models.ExtraField", "ExtraField")
                        .WithMany("KpiFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraField");
                });

            modelBuilder.Entity("Tenor.Models.KpiFieldValue", b =>
                {
                    b.HasOne("Tenor.Models.KpiField", "KpiField")
                        .WithMany("KpiFieldValues")
                        .HasForeignKey("KpiFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenor.Models.Kpi", "Kpi")
                        .WithMany("KpiFieldValues")
                        .HasForeignKey("KpiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kpi");

                    b.Navigation("KpiField");
                });

            modelBuilder.Entity("Tenor.Models.MeasureHaving", b =>
                {
                    b.HasOne("Tenor.Models.Operator", "Operator")
                        .WithMany("MeasureHavings")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenor.Models.ReportMeasure", "ReportMeasure")
                        .WithMany()
                        .HasForeignKey("ReportMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("ReportMeasure");
                });

            modelBuilder.Entity("Tenor.Models.Operation", b =>
                {
                    b.HasOne("Tenor.Models.Counter", "Counter")
                        .WithMany("Operations")
                        .HasForeignKey("CounterId");

                    b.HasOne("Tenor.Models.Function", "Function")
                        .WithMany("Operations")
                        .HasForeignKey("FunctionId");

                    b.HasOne("Tenor.Models.Kpi", "Kpi")
                        .WithMany()
                        .HasForeignKey("KpiId");

                    b.HasOne("Tenor.Models.Operator", "Operator")
                        .WithMany("Operations")
                        .HasForeignKey("OperatorId");

                    b.HasOne("Tenor.Models.Operation", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Counter");

                    b.Navigation("Function");

                    b.Navigation("Kpi");

                    b.Navigation("Operator");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Tenor.Models.Report", b =>
                {
                    b.HasOne("Tenor.Models.Report", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId");

                    b.HasOne("Tenor.Models.Device", "Device")
                        .WithMany("Reports")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Tenor.Models.ReportField", b =>
                {
                    b.HasOne("Tenor.Models.ExtraField", "ExtraField")
                        .WithMany("ReportFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraField");
                });

            modelBuilder.Entity("Tenor.Models.ReportFieldValue", b =>
                {
                    b.HasOne("Tenor.Models.ReportField", "ReportField")
                        .WithMany("ReportFieldValues")
                        .HasForeignKey("ReportFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenor.Models.Report", "Report")
                        .WithMany("ReportFieldValues")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("ReportField");
                });

            modelBuilder.Entity("Tenor.Models.ReportFilter", b =>
                {
                    b.HasOne("Tenor.Models.DimensionLevel", "DimensionLevel")
                        .WithMany("ReportFilters")
                        .HasForeignKey("DimensionLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenor.Models.Report", "Report")
                        .WithMany("Filters")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DimensionLevel");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Tenor.Models.ReportLevel", b =>
                {
                    b.HasOne("Tenor.Models.DimensionLevel", "DimensionLevel")
                        .WithMany("ReportLevels")
                        .HasForeignKey("DimensionLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenor.Models.Report", "Report")
                        .WithMany("Levels")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DimensionLevel");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Tenor.Models.ReportMeasure", b =>
                {
                    b.HasOne("Tenor.Models.Operation", "Operation")
                        .WithMany("ReportMeasures")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenor.Models.Report", "Report")
                        .WithMany("Measures")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Tenor.Models.RolePermission", b =>
                {
                    b.HasOne("Tenor.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenor.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Tenor.Models.Subset", b =>
                {
                    b.HasOne("Tenor.Models.Device", "Device")
                        .WithMany("Subsets")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Tenor.Models.SubsetField", b =>
                {
                    b.HasOne("Tenor.Models.ExtraField", "ExtraField")
                        .WithMany("SubsetFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraField");
                });

            modelBuilder.Entity("Tenor.Models.SubsetFieldValue", b =>
                {
                    b.HasOne("Tenor.Models.SubsetField", "SubsetField")
                        .WithMany("SubsetFieldValues")
                        .HasForeignKey("SubsetFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenor.Models.Subset", "Subset")
                        .WithMany("SubsetFieldValues")
                        .HasForeignKey("SubsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subset");

                    b.Navigation("SubsetField");
                });

            modelBuilder.Entity("Tenor.Models.TenantDevice", b =>
                {
                    b.HasOne("Tenor.Models.Device", "Device")
                        .WithMany("TenantDevices")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenor.Models.Tenant", "Tenant")
                        .WithMany("TenantDevices")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Tenor.Models.UserTenantRole", b =>
                {
                    b.HasOne("Tenor.Models.Role", "Role")
                        .WithMany("UserTenantRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenor.Models.Tenant", "Tenant")
                        .WithMany("UserTenantRoles")
                        .HasForeignKey("TenantId");

                    b.Navigation("Role");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Tenor.Models.Counter", b =>
                {
                    b.Navigation("CounterFieldValues");

                    b.Navigation("Operations");
                });

            modelBuilder.Entity("Tenor.Models.CounterField", b =>
                {
                    b.Navigation("CounterFieldValues");
                });

            modelBuilder.Entity("Tenor.Models.Dashboard", b =>
                {
                    b.Navigation("DashboardFieldValues");
                });

            modelBuilder.Entity("Tenor.Models.DashboardField", b =>
                {
                    b.Navigation("DashboardFieldValues");
                });

            modelBuilder.Entity("Tenor.Models.Device", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("Dimensions");

                    b.Navigation("ExtraFields");

                    b.Navigation("Kpis");

                    b.Navigation("Reports");

                    b.Navigation("Subsets");

                    b.Navigation("TenantDevices");
                });

            modelBuilder.Entity("Tenor.Models.Dimension", b =>
                {
                    b.Navigation("DimensionJoiners");

                    b.Navigation("DimensionLevels");
                });

            modelBuilder.Entity("Tenor.Models.DimensionLevel", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("ReportFilters");

                    b.Navigation("ReportLevels");
                });

            modelBuilder.Entity("Tenor.Models.ExtraField", b =>
                {
                    b.Navigation("CounterFields");

                    b.Navigation("DashboardFields");

                    b.Navigation("KpiFields");

                    b.Navigation("ReportFields");

                    b.Navigation("SubsetFields");
                });

            modelBuilder.Entity("Tenor.Models.Function", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("Tenor.Models.Kpi", b =>
                {
                    b.Navigation("KpiFieldValues");
                });

            modelBuilder.Entity("Tenor.Models.KpiField", b =>
                {
                    b.Navigation("KpiFieldValues");
                });

            modelBuilder.Entity("Tenor.Models.Level", b =>
                {
                    b.Navigation("DimensionLevels");
                });

            modelBuilder.Entity("Tenor.Models.Operation", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("ReportMeasures");
                });

            modelBuilder.Entity("Tenor.Models.Operator", b =>
                {
                    b.Navigation("MeasureHavings");

                    b.Navigation("Operations");
                });

            modelBuilder.Entity("Tenor.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Tenor.Models.Report", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("Levels");

                    b.Navigation("Measures");

                    b.Navigation("ReportFieldValues");
                });

            modelBuilder.Entity("Tenor.Models.ReportField", b =>
                {
                    b.Navigation("ReportFieldValues");
                });

            modelBuilder.Entity("Tenor.Models.Role", b =>
                {
                    b.Navigation("GroupTenantRoles");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserTenantRoles");
                });

            modelBuilder.Entity("Tenor.Models.Subset", b =>
                {
                    b.Navigation("Counters");

                    b.Navigation("SubsetFieldValues");
                });

            modelBuilder.Entity("Tenor.Models.SubsetField", b =>
                {
                    b.Navigation("SubsetFieldValues");
                });

            modelBuilder.Entity("Tenor.Models.Tenant", b =>
                {
                    b.Navigation("GroupTenantRoles");

                    b.Navigation("TenantDevices");

                    b.Navigation("UserTenantRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
